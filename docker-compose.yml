services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # This service is less critical now as the pipeline manages its own environment
  init-db:
    build:
      context: .
      dockerfile: Dockerfile.backend
    volumes:
      - ./data/db_files:/app/db_files
    environment:
      - PYTHONPATH=/app
    # Run the init script using the micromamba entrypoint
    command: ["python", "backend/init_db.py"]
    depends_on:
      - redis
    restart: "no"

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - redis
    volumes:
      # Mount the entire project to get pipeline code
      - .:/app
      - ./data/db_files:/app/data/db_files # Persistent storage for SQLite
      - ./data/uploads:/app/uploads       # Persistent storage for uploads
    command: ["gunicorn", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "backend.main:app", "--bind", "0.0.0.0:8000"]

  worker:
    build:
      context: .
      dockerfile: Dockerfile.backend # Reuses the backend image
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - redis
      - backend
    volumes:
      # Mount the entire project to get pipeline code
      - .:/app
      - ./data/db_files:/app/data/db_files
      - ./data/uploads:/app/uploads
    # Command for the worker also uses micromamba
    command: ["celery", "-A", "backend.worker.celery_app", "worker", "--loglevel=info"]

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend

volumes:
  redis_data: