services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data # Persistent storage for Redis data

  init-db:
    build:
      context: .
      dockerfile: Dockerfile.backend # Reuse the backend's Dockerfile
    volumes:
      - ./data/db_files:/app/db_files # Mount the *same* database file volume
    environment:
      - PYTHONPATH=/app
    command: python backend/init_db.py # Run the initialization script
    depends_on:
      - redis # Ensure redis is up if needed, though primarily for backend/worker
    # It's good practice to make init containers not restart automatically,
    # as they've done their job once the database is created.
    restart: "no" # This is important for init containers
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - redis
    volumes:
      - ./data/db_files:/app/db_files # Persistent storage for SQLite database
      - ./data/uploads:/app/uploads # Persistent storage for uploaded files
    command: gunicorn -w 4 -k uvicorn.workers.UvicornWorker backend.main:app --bind 0.0.0.0:8000

  worker:
    build:
      context: .
      dockerfile: Dockerfile.backend # Reuses the backend image for the worker
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - redis
      - backend # Worker needs backend to be up for database access (if any startup tasks depend on it)
    command: celery -A backend.worker.celery_app worker --loglevel=info

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    restart: unless-stopped
    ports:
      - "3000:80" # Map host port 3000 to container port 80
    depends_on:
      - backend # Frontend needs backend to be accessible for API calls

volumes:
  redis_data: